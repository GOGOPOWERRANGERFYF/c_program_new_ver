个人理解:
    每个作用域有一个符号表?
    符号表数据结构实现并不是只有一种实现。
    存储绑定
    ...
    生成最终的机器代码后,不再需要通过符号表存储绑定,
    因此符号表
    (不同作用域的符号表提供了作用域:可见性;
    符号表表项记录标识符各种属性,例如静态类型变量;)
    只是编译过程中存在的东西和概念,编译完成后的机器码并不存在符号表的信息。

网络资料:
    词法作用域（静态作用域）是在书写代码或者说定义时确定的，
    而动态作用域是在运行时确定的。 
    词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用，
    其作用域链是基于运行时的调用栈的。

词法作用域又叫静态作用域.
动态作用域并不安全,现在很少编程语言用???(不管,反正现在暂时忽略这玩意...)

个人理解:
    闭包是因为外层函数调用栈出栈了(被销毁了)

网络资料汇总:
    动态编译(CPython)-->JIT编译(js v8)
    动态编译(dynamic compilation)指的是"在运行时进行编译";
    事前编译(ahead of time compilation, AOT),也叫静态编译(static compilation)
    JIT编译(just in time compilation)狭义来说是当某段代码即将第一次被执行时进行编译,
    因而叫 即时编译。JIT编译时动态编译的一种特列。
    JIT编译一词后来被泛化，时常与动态编译等价；但要注意宽泛与狭义的JIT编译所指的区别。
    (扩展:还有自适应动态编译...)

    c/c++ 事前编译,静态编译
    动态链接库和静态链接库(别和动态编译和静态编译弄混)
    发生在编译的链接阶段,
                .s     .o       
    预编译->编译->汇编->{链接}->可执行文件
                        |
                        lib(每个执行文件包含lib)
                        dll(每个执行文件共享dll)